/*
 * Just Order Api
 *
 * An API to create and retrieve Food items and orders.
 *
 * OpenAPI spec version: 1.0.0
 * Contact: john.doe@somecomp.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// An Order is created with unique Id, subtotal, tax and Grand Total along with the items that were added.
    /// </summary>
    [DataContract]
    public partial class Order : IEquatable<Order>
    { 
        /// <summary>
        /// Identifier of the Placed order
        /// </summary>
        /// <value>Identifier of the Placed order</value>
        [Required]
        [DataMember(Name="orderId")]
        public Guid? OrderId { get; set; }

        /// <summary>
        /// List of Items submitted in this Order
        /// </summary>
        /// <value>List of Items submitted in this Order</value>
        [Required]
        [DataMember(Name="lineItems")]
        public List<LineItem> LineItems { get; set; }

        /// <summary>
        /// Total of the Items without Tax
        /// </summary>
        /// <value>Total of the Items without Tax</value>
        [Required]
        [DataMember(Name="orderSubTotal")]
        public decimal? OrderSubTotal { get; set; }

        /// <summary>
        /// Sales Tax for this order
        /// </summary>
        /// <value>Sales Tax for this order</value>
        [Required]
        [DataMember(Name="salesTax")]
        public decimal? SalesTax { get; set; }

        /// <summary>
        /// Order Total including Tax
        /// </summary>
        /// <value>Order Total including Tax</value>
        [Required]
        [DataMember(Name="total")]
        public decimal? Total { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Order {\n");
            sb.Append("  OrderId: ").Append(OrderId).Append("\n");
            sb.Append("  LineItems: ").Append(LineItems).Append("\n");
            sb.Append("  OrderSubTotal: ").Append(OrderSubTotal).Append("\n");
            sb.Append("  SalesTax: ").Append(SalesTax).Append("\n");
            sb.Append("  Total: ").Append(Total).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Order)obj);
        }

        /// <summary>
        /// Returns true if Order instances are equal
        /// </summary>
        /// <param name="other">Instance of Order to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Order other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    OrderId == other.OrderId ||
                    OrderId != null &&
                    OrderId.Equals(other.OrderId)
                ) && 
                (
                    LineItems == other.LineItems ||
                    LineItems != null &&
                    LineItems.SequenceEqual(other.LineItems)
                ) && 
                (
                    OrderSubTotal == other.OrderSubTotal ||
                    OrderSubTotal != null &&
                    OrderSubTotal.Equals(other.OrderSubTotal)
                ) && 
                (
                    SalesTax == other.SalesTax ||
                    SalesTax != null &&
                    SalesTax.Equals(other.SalesTax)
                ) && 
                (
                    Total == other.Total ||
                    Total != null &&
                    Total.Equals(other.Total)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (OrderId != null)
                    hashCode = hashCode * 59 + OrderId.GetHashCode();
                    if (LineItems != null)
                    hashCode = hashCode * 59 + LineItems.GetHashCode();
                    if (OrderSubTotal != null)
                    hashCode = hashCode * 59 + OrderSubTotal.GetHashCode();
                    if (SalesTax != null)
                    hashCode = hashCode * 59 + SalesTax.GetHashCode();
                    if (Total != null)
                    hashCode = hashCode * 59 + Total.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Order left, Order right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Order left, Order right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
